(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-549fa58a"],{"290b":function(e,t,n){"use strict";var a=n("e8cf"),r=n.n(a);t["default"]=r.a},"2ec8":function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",[n("div",{staticClass:"card"},[n("div",{staticClass:"card-header"},[e._v(" Docs ")]),n("div",{staticClass:"card-body"},[n("p",[e._v("Documentation and examples for Bootstrap typography, including global settings, headings, body text, lists, and more.")]),n("CTabs",{attrs:{variant:"pills",vertical:{navs:"col-12 col-md-2 col-lg-3",content:"col-12 col-md-10 col-lg-9"}}},[n("CTab",{attrs:{active:""}},[n("template",{slot:"title"},[n("CIcon",{attrs:{name:"cil-calculator"}}),e._v(" Core UI Docs ")],1),n("a",{attrs:{href:"https://coreui.io/vue/docs/",target:"_blank"}},[e._v("https://coreui.io/vue/docs/")])],2),n("CTab",[n("template",{slot:"title"},[n("CIcon",{attrs:{name:"cil-basket"}}),e._v(" Vue Formulate + Forms Schema ")],1),n("DocsFormulate")],2),n("CTab",[n("template",{slot:"title"},[n("CIcon",{attrs:{name:"cil-chart-pie"}}),e._v(" Vue Data tables ")],1),n("DocsDatatables")],2),n("CTab",[n("template",{slot:"title"},[n("CIcon",{attrs:{name:"cil-chart-pie"}}),e._v(" Configuration ")],1),n("DocsSettings")],2),n("CTab",[n("template",{slot:"title"},[n("CIcon",{attrs:{name:"cil-chart-pie"}}),e._v(" Others ")],1),n("a",{attrs:{href:"https://www.njleonzhang.com/vue-data-tables/#/",target:"_blank"}},[e._v("https://www.njleonzhang.com/vue-data-tables/#/")]),e._v(" element-ui v-jsoneditor ")],2)],1)],1)])])},r=[],o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("CTabs",[n("CTab",{attrs:{title:"Dashboard Configuration (Pre Build)",active:""}},[n("DocsSettingsDashboard")],1),n("CTab",{attrs:{title:"Project Json Configuration",active:""}},[n("DocsSettingsProject")],1),n("CTab",{attrs:{title:"Schema Json Configuration"}},[n("DocsSettingsSchema")],1)],1)],1)},l=[],s=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},i=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("h6",[e._v("To configure dashboard fill the .env and build vue")]),n("pre",[e._v("\r\n    VUE_APP_ENV=local\r\n    VUE_APP_DATABASE=/models/projects.json\t\t\t// Projects json file path/url | default /public/models/projects.json\r\n\r\n    VUE_APP_LOGIN=true  | true/false\r\n    // Required if login true\r\n    VUE_APP_LOGIN=https://project.com/auth/login\t// Dashboard Login auth url\r\n    VUE_APP_LOGIN_USER_FIELD=email\t\t\t\t\t// Username field\r\n    VUE_APP_LOGIN_PASS_FIELD=password\t\t\t\t// Password field\r\n    VUE_APP_LOGIN_TOKEN_PATH=token\t\t\t\t\t// Response token path in data object\r\n    VUE_APP_LOGIN_TOKEN_HEADER=access-token\t\t\t// Request token header JWT \r\n    VUE_APP_LOGGED_URL=https://project.com/auth/logged\t// Get logged user data url\r\n    ")]),e._v(" Run locally: "),n("pre",[e._v("\r\n    npm run serve\r\n    ")])])}],d=n("2877"),c={},u=Object(d["a"])(c,s,i,!1,null,null,null),p=u.exports,m=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},v=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("pre",[e._v('\r\n    [\r\n        {                                                        //required | Project config\r\n        "code": "modelslug",\r\n        "name": "Model Label",\r\n        "url": "https://project-url.com",\r\n        "resources_path": "/models/",                           //Base path or base URL of Json Models folder\r\n        "resources": {                                          // Project crud endpoints schema\r\n            "users": {                                          // !IMPORTANT: object index match url target\r\n                "resource": "users_schema.json",                // Schema Json url/path\r\n                "label": "Users"\r\n            },\r\n            "roles":{\r\n                "resource": "roles_schema.json",\r\n                "label": "Roles"\r\n            }\r\n        },\r\n                                                                // optional | Project authentication api\r\n        "auth": {\r\n            "url_login": "https://project-url.com/api/user",\t// Url of login api\r\n            "url_method": "post",                               // Login http method  | Default POST\r\n            "field_username": "user_id",                        // Username field to be send | Defaut email\r\n            "field_secret": "access_token",                     // Password/Secret field  | Default password\r\n            "field_remember": "remember",                       // Remember field to permanent login (if exists) | Default remember\r\n            "response_mode": "body",                        \t// How to get token string | opts: body/header | Default body\r\n            "response_token": "token",                      \t// Response data token location (ex: {user:{token: \'...\'}} means user.token) | Default \'token\'\r\n            "request_mode": "header",                       \t// How to send token between requests | opts: header/query | Default header\r\n            "request_token": "access-token",                    // Token field name | Default access-token\r\n            "request_token_expression": "Bearer {token}",       // Token request value expression to be interpolated | Default {token}\t\t\r\n            "logged_url": "https://project-url.com/api/user",\t// Url to How to get logged user data  \r\n            "logged_model": {                                   // User response DTO\r\n                "id": "_id",                                    // Ex: { id: 1, fullname: \'John doe\', email: \'email@email.com\', level: \'admin\' }\r\n                "name": "fullname",\r\n                "username": "email",\r\n                "role": "level"\r\n            }\r\n        },\r\n        }\r\n    ]\r\n    ')])])}],_={},f=Object(d["a"])(_,m,v,!1,null,null,null),b=f.exports,h=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},g=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("pre",[e._v('{\n    "type": "object",\n    "title": "Users",                           // Schema title visible to user\n    "domain": "users",                          // Schema slug visible on url\n    "primaryKey": "id",                         // Collection primary key (default: id)\n    "auth": true,                               // Define auth required before get data (auth config on project json)\n    "properties": [                             // Form/Datatable properties\n        {                                       // VueFormulate / Grid table schema\n            "name": "id",                       // Data object index\n            "label": "ID",                      // Visible label\n            "config":{                          // Table grid config\n                "grid": true,                   // Visible in grid\n                "sort": 0                       // Sort order in grid\n            }                                   // Docs link: https://vueformulate.com/guide/inputs/\n        } \n    ],\n    "api": {                                        // Crud endpoint config\n        "rootApi": "https://project.com/users",     // Endpoint base url - Required\n//\n//Optional \n//\n        "urlGet": "{query}",                        // Get all url expression with datatables query string by default ( def: \'/{collection}{query}\') \n        "urlGetById": "/{id}{query}",               // Get by id url expression  with datatables query string by default ( def: \'/{collection}/{primaryKey}{query}\') \n        "urlPost": "/",                             // Create url expression ( def: \'/{collection}\') | you can add {query} if applied\n        "urlPatch": "/{id}",                        // Update url expression ( def: \'/{collection}/{primaryKey}\') | you can add {query} if applied\n        "urlDelete": "/{id}",                       // Delete url expression ( def: \'/{collection}/{primaryKey}\') | you can add {query} if applied\n        "methodGet": "GET",                         // Get all method (def: GET)\n        "methodGetById": "GET",                     // Get One by id method (def: GET)\n        "methodPost": "POST",                       // Create method (def: POST)\n        "methodPatch": "PUT",                       // Update method (def: PUT)\n        "methodDelete": "GET",                      // Delete method (def: DELETE)\n        "bypassGetData": false                      // Use data from props intead api http request\n        "bypassGetByid": true,                      // Use table row click instead GetById request (def: false)\n        "wrapData": "rows",                         // Response object array data field (ex: { rows: [...] } means \'rows\')\n        "totalData": "count",                       // Count data field | if not exists used data.length by def\n        "wrapDataById": "data",                     // Wrap the GetOne Response (ex: { data: {...} } means \'data\')  \n        "pagination": {                             // Query string settings\n            "pageField": "page",                    // pagination field\n            "limitField": "limit",                  // Data count limit field  \n            "sortField": "order",                   // Sort field\n            "sortExp": "{prop},{sort}",             // Sort expression data to be interpolated (ex: \'{prop},{sort}\' means \'sort=id,desc\'\n            "sortAscChar": "asc",                   // Ascending sort character (def: \'asc\')\n            "sortDescChar": "desc",                 // Descending sort character (def: \'desc\')\n            "filterField": "filter|{prop}",         // Filter field (can use string or prop selected by form)\n            "filterExp": "{prop},like,%{value}%"    // Field expression value\n        },\n        "params": {                                 // Fixed query string params\n            "limit": 15,\n            "ga": "123-1224",\n            "filter": ["john", "doe"]               // Multiple index query string (result in filter=john&filter=doe)\n        },\n        "headers":{                                 // Fixed headers params\n            "app-key": "qwertyuiop-asdfghjkls"\n        }\n//\n// END Optional\n//\n    }\n}\n    ')])])}],y={},j=Object(d["a"])(y,h,g,!1,null,null,null),w=j.exports,D={components:{DocsSettingsDashboard:p,DocsSettingsProject:b,DocsSettingsSchema:w}},x=D,k=Object(d["a"])(x,o,l,!1,null,null,null),E=k.exports,T=n("a1b2"),S=n("32b8"),P={components:{DocsSettings:E,DocsFormulate:T["default"],DocsDatatables:S["default"]},data:function(){return{activeTab:1}}},C=P,q=Object(d["a"])(C,a,r,!1,null,null,null);t["default"]=q.exports},"32b8":function(e,t,n){"use strict";var a=n("8860"),r=n("290b"),o=n("2877"),l=Object(o["a"])(r["default"],a["a"],a["b"],!1,null,null,null);t["default"]=l.exports},4068:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return r}));var a=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("p"),n("h4",[e._v("# Formulate Input Types: "),n("a",{attrs:{href:"https://vueformulate.com/guide/inputs/",target:"_blank"}},[e._v("(see docs here)")])]),n("li",[e._v("Button")]),n("li",[e._v("Box")]),n("li",[e._v("File")]),n("li",[e._v("Group")]),n("li",[e._v("Select")]),n("li",[e._v("Slider")]),n("li",[e._v("Text")]),n("li",[e._v("Textarea")]),n("p"),n("p"),n("h4",[e._v("# Formulate Extended features available: "),n("a",{attrs:{href:"https://www.npmjs.com/package/vue-formulate-extended",target:"_blank"}},[e._v("(See docs Here)")])]),n("li",[e._v("Events")]),n("li",[e._v("Masks")]),n("li",[e._v("Number enforcing")]),n("p"),n("p"),n("h4",[e._v("# Pluggable dashboard additional custom fields")]),n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-dashed"},[n("tr",[n("td",[e._v("Type")]),n("td",[e._v("Params")]),n("td",[e._v("Description")]),n("td",[e._v("example")])]),n("tr",[n("td",[e._v("autocomplete")]),n("td",[n("p",[e._v("options: array/object")])]),n("td",[e._v(" Receive array of objects, like select field: ex: { value:1, label:'John' } ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "autocomplete",\n                                "label": "Autocomplete",\n                                "type": "autocomplete", \n                                "options": [\n                                    { "value": 1, "label": "Jon Doe"  }\n                                ]\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("code")]),n("td",[n("p",[e._v("N/A")])]),n("td",[e._v(" Use Vue Prism Editor to show js/css/lang code "),n("a",{attrs:{href:"https://github.com/koca/vue-prism-editor",target:"_blank"}},[e._v("(See docs here)")])]),n("td",[n("pre",[e._v('                            {\n                                "name": "code",\n                                "label": "Code",\n                                "type": "code"\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("dynamicSelect")]),n("td",[n("p",[e._v("options: array|object - Default options")]),n("ul",[n("li",[e._v(" attributes: object "),n("ul",[n("li",[e._v("url: string - URL of items (Can use {data} to interpolate row)")]),n("li",[e._v("wrapData: string - response object|array wrap")]),n("li",[e._v("fieldLabel: string - response row index of label field")]),n("li",[e._v("fieldValue: string - response row index of value field")]),n("li",[e._v("requestOptions: object - request headers,params,querystring config (like api)")])])])])]),n("td",[e._v(" Make a http request to get select options. ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "dynamicselect",\n                                "label": "Dynamic Select",\n                                "type": "dynamicSelect",\n                                "options": [],\n                                "attributes":{\n                                    "url": "/examples/advanced_data.json",\n                                    "fieldLabel": "name",\n                                    "fieldValue": "id",\n                                    "wrapData": "users",\n                                    "requestOptions":{\n                                        "headers": { "app-key": "..." }\n                                    }\n                                }\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("grid")]),n("td",[n("ul",[n("p",[e._v("schema: object - Nested schema object")]),n("li",[e._v(" properties: array of formulate/grid properties ")])])]),n("td",[e._v(" Create a nested collection crud form on same form (thinking to use with NoSQL collections) ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "grid",\n                                "label": "Grid",\n                                "type": "grid",\n                                "schema": {\n                                    "api": {\n                                        "bypassGetData": true // required to local array edit\n                                        "rootApi": "http://..." // required if is relation crud edit\n                                    },\n                                    "properties":[\n                                        { \n                                            "name": "name", \n                                            "label": "name" \n                                        }\n                                    ]\n                                }\n                            },\n                        ')])])]),n("tr",[n("td",[e._v("imageText")]),n("td",[e._v(" N/A ")]),n("td",[e._v(" Simple url text field with image preview (when filled) ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "image",\n                                "label": "Image Text",\n                                "type": "imageText"\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("image")]),n("td",[n("ul",[n("li",[e._v("uploadUrl: string - Url to make a binary upload")]),n("li",[e._v("validation: string - validation mime types")]),n("li",[e._v("accept: string - file prompt accept mime types")]),e._v(", "),n("li",[e._v("options: object "),n("ul",[n("li",[e._v("fieldValue: string - response data url wrap")])])])])]),n("td",[e._v(" Formulate file upload implementation ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "image",\n                                "label": "Image with upload",\n                                "type": "image",\n                                "uploadUrl": "/examples/advanced_data.json",\n                                "validation":"mime:application/pdf",\n                                "accept": "application/pdf",\n                                "options":{\n                                    "fieldValue": "upload"\n                                }\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("json")]),n("td",[n("p",[e._v("parse: boolean - parse json response data ")])]),n("td",[e._v(" Json editor/viewer implementation of Vue Json editor "),n("a",{attrs:{href:"https://github.com/yansenlei/VJsoneditor",target:"_blank"}},[e._v("(See VJsonEditor docs)")])]),n("td",[n("pre",[e._v('                           {\n                                "name": "json",\n                                "label": "Json view",\n                                "type": "json",\n                                "parse": true\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("object")]),n("td",[n("p",[e._v("name: string - object index name")]),n("p",[e._v("options: array - nested formulate inputs")])]),n("td",[e._v(" Used to update sub objects with nested form schema (thinking to use with NoSQL) ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "address",\n                                "type": "object",\n                                "options": [\n                                    {\n                                        "name": "street",\n                                        "label": "Street"\n                                    }\n                                ]\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("switch")]),n("td",[e._v(" N/A ")]),n("td",[e._v(" Switch boolean data true/false friendly ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "switch",\n                                "label": "Switch",\n                                "type": "switch"\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("tags")]),n("td",[n("p",[e._v(" attributes.output: string - output type when form submited (json|object) ")])]),n("td",[e._v(" Array|json tags field, to manage array data on input/output form ")]),n("td",[n("pre",[e._v('                           {\n                                "name": "tags",\n                                "label": "Tags",\n                                "type": "tags",\n                                "attributes":{\n                                    "output": "json"\n                                }\n                            } \n                        ')])])]),n("tr",[n("td",[e._v("wysiwyg")]),n("td",[e._v(" N/A ")]),n("td",[e._v(" Open content on HTML editor (Vue Quill) to be formated friendly. "),n("a",{attrs:{href:"https://github.com/CroudTech/vue-quill",target:"_blank"}},[e._v("(See Vue quill docs)")])]),n("td",[n("pre",[e._v('                            {\n                                "name": "wysiwyg",\n                                "label": "Wysiwyg editor",\n                                "type": "wysiwyg"\n                            }\n                        ')])])])]),n("p"),n("h4",[e._v("Html Styled Component")]),n("p",[e._v("You can add html wrappers and use global components as a formulate property. Example: "),n("pre",[e._v('                        {\n                            "component": "h4",\n                            "children": "My big title"\n                        }\n                    ')])]),n("p",[e._v(" You can define a sub Crud using a schema or loading a new schema, overwriting schema properties, like: "),n("pre",[e._v('                        {\n                            "component": "Crud",\n                            "context":{\n                                "schema": "object schema or filename (only in the same project), ex: roles.json",\n                                "overwrite":{\n                                    "api":{\n                                        "params": { \n                                            "filter": "user_id,eq,{data.id}" // data is active form values\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ')])]),n("p")]),n("p")])}]},8860:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return r}));var a=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("p"),n("h4",[e._v("# Grid provided by Vue Datatables grid: "),n("a",{attrs:{href:"https://www.njleonzhang.com/vue-data-tables/#/",target:"_blank"}},[e._v("(see docs here)")])]),n("p",[e._v(" To show field data on grid, you should add an additional object called config on property schema. ")]),n("pre",[e._v('            {\n                ...\n                "config":{\n                    "grid": true,   // Show on grid true|false\n                    "sort": 1       // Sort column order\n                }\n            }\n        ')]),n("p",[e._v(' By default, the row data will be display in v-text, to use custom types, you should add "type" parameter with desire cell type. See below available types and examples. ')]),n("p"),n("p"),n("h4",[e._v("# Pluggable dashboard custom cell types")]),n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-dashed"},[n("tr",[n("td",[e._v("Type")]),n("td",[e._v("Params")]),n("td",[e._v("Description")]),n("td",[e._v("example")])]),n("tr",[n("td",[e._v("html")]),n("td",[e._v(" N/A ")]),n("td",[e._v(" Show data as HTML (v-html) Careful to use this feature ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "html",\n                                "config":{\n                                    "grid:": true,\n                                    "type": "html"\n                                }\n                            }\n                        ')]),e._v(" /> ")])]),n("tr",[n("td",[e._v("object")]),n("td",[n("ul",[n("li",[e._v("action: object")]),n("ul",[n("li",[e._v("name: string - object path of field (lodash get)")])])])]),n("td",[e._v(" Used to display sub object values on grid. Read about lodash.js get feature to understand how to access item levels. ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "address",\n                                "type": "object",\n                                "config":{\n                                    "grid": true,\n                                    "type": "object",\n                                    "action": {\n                                        "name":"address.street"\n                                    }\n                                },\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("date")]),n("td",[n("ul",[n("li",[e._v(" action: object "),n("ul",[n("li",[e._v("format: string - moment.js date format")]),n("li",[e._v("from: string - moment.js date from format")]),n("li",[e._v("utc: boolean - moment.js utc date convert (dates with Y-M-DThh:mm:ss.000Z)")])])])])]),n("td",[e._v(" Parse, format and show date/times ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "created",\n                                "type": "date",\n                                "config": {\n                                    "grid": true,\n                                    "type": "date",\n                                    "action": {\n                                       "format": "D/M/YY \\\\a\\\\s hh:mm",\n                                       "from": "D/M/YY",\n                                       "utc": true \n                                    }\n                                }\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("expression")]),n("td",[n("ul",[n("li",[e._v("action: object")]),n("ul",[n("li",[e._v("template: string - template to be interpolated by data and cell values")])])])]),n("td",[e._v(" Interpolate data/cell variables safe with template expression '{data}' or '{cell}'."),n("br"),e._v(" {data} property means grid column value"),n("br"),e._v(" {cell} property means cell schema config, { type, prop, action, ... } ")]),n("td",[n("pre",[e._v('                           {\n                                "name": "code",\n                                "config": {\n                                    "grid": true,\n                                    "type": "expression",\n                                    "action": {\n                                        "template": "'),n("code",[e._v("{data}")]),e._v('"\n                                    }\n                                }\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("action")]),n("td",[n("ul",[n("li",[e._v("action: object")]),n("ul",[n("li",[e._v("handler: string - url to be called")]),n("li",[e._v("target: string - window target (def: _blank)")]),n("li",[e._v("label: string expression - expression of button label")])])])]),n("td",[e._v(" Create link based on data ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "id",\n                                "config": {\n                                    "grid": true,\n                                    "type": "action",\n                                    "action": {\n                                        "handler": "https://google.com",\n                                        "target": "_blank",\n                                        "label": "'),n("span",{attrs:{title:"{data}"}},[e._v("#ID")]),e._v('"\n                                    }\n                                }\n                            },\n                        ')])])]),n("tr",[n("td",[e._v("select")]),n("td",[n("ul",[e._v(" N/A ")])]),n("td",[e._v(" Show readonly data by select input (to dynamic/array options) ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "gender",\n                                "type": "select",\n                                "config": {\n                                    "grid": true,\n                                    "type": "select"\n                                },\n                                "options": [\n                                    { "value": "male", "label": "Male" },\n                                    { "value": "female", "label": "Female" }\n                                ]\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("image")]),n("td",[e._v(" N/A ")]),n("td",[e._v(" Thumbnail image preview with zoom by click ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "avatar",\n                                "config": {\n                                    "grid": true,\n                                    "type": "image"\n                                }\n                            }\n                        ')])])]),n("tr",[n("td",[e._v("tags")]),n("td",[e._v(" N/A ")]),n("td",[e._v(" Array tags joined by ',' (valid json|array) ")]),n("td",[n("pre",[e._v('                            {\n                                "name": "tags",\n                                "type": "tags",\n                                "attributes": {\n                                    "output": "json"\n                                },\n                                "config": {\n                                    "grid": true,\n                                    "type": "tags"\n                                }\n                            }\n                        ')])])])])]),n("p")])}]},"92c7":function(e,t,n){"use strict";var a=n("b85e"),r=n.n(a);t["default"]=r.a},a1b2:function(e,t,n){"use strict";var a=n("4068"),r=n("92c7"),o=n("2877"),l=Object(o["a"])(r["default"],a["a"],a["b"],!1,null,null,null);t["default"]=l.exports},b85e:function(e,t){},e8cf:function(e,t){}}]);
//# sourceMappingURL=chunk-549fa58a.f29348eb.js.map